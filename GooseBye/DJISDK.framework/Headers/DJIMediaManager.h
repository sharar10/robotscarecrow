//
//  DJIMediaManager.h
//  DJISDK
//
//  Copyright Â© 2015, DJI. All rights reserved.
//

#import <DJISDK/DJISDKFoundation.h>

NS_ASSUME_NONNULL_BEGIN

@class DJIMedia;
@class DJIMediaManager;
@class DJIMediaVideoPlaybackState;

/**
 *  This protocol provides a delegate method to receive the updated video playback
 *  state of the media manager.
 */
@protocol DJIMediaManagerDelegate <NSObject>

@optional
/**
 *  Updates the video playback state of the media manager. This update method
 *  will only be called when the media manager is playing a video.
 *
 *  @param manager  The media manager updates the playback state.
 *  @param state    The playback state.
 */
-(void)manager:(DJIMediaManager *)manager didUpdateVideoPlaybackState:(DJIMediaVideoPlaybackState *)state;


@end

/*********************************************************************************/
#pragma mark - DJIMediaManager
/*********************************************************************************/

/**
 *  The media manager is used to interact with the file system on the SD card.
 *  By using the media manager, the user can get the metadata for all the
 *  multimedia files, and has access to each individual multimedia file.
 */
@interface DJIMediaManager : NSObject

/**
 *  Delegate that receives media manager's status update.
 */
@property (nonatomic, nullable, weak) id<DJIMediaManagerDelegate> delegate;

/**
 *  Fetch the media list from the remote album. Set the camera's work mode to
 *  `DJICameraModeMediaDownload` before executing this method.
 *
 *  @param block Remote execute result. Objects in mediaList are kind of class DJIMedia.
 */
- (void)fetchMediaListWithCompletion:(void (^_Nonnull)(NSArray<DJIMedia *> *_Nullable mediaList, NSError *_Nullable error))block;

/**
 *  Delete media files from remote album. Set the camera's work mode to
 *  `DJICameraModeMediaDownload` before executing this method. Deletion is not
 *  supported by the media file generated by a panorama mission.
 *
 *  @param media  Media files to be deleted.
 *  @param block  The remote execution result. 'deleteFailures' will contain
 *                media that failed to delete.
 */
- (void)deleteMedia:(NSArray<DJIMedia *> *_Nonnull)media withCompletion:(void (^_Nullable)(NSArray<DJIMedia *> *_Nonnull deleteFailures, NSError *_Nullable error))block;

@end

/**
 *  Category of `DJIMediaManager` includes methods to control the video playback.
 */
@interface DJIMediaManager (VideoPlayback)

/**
 *  Checks if the media manager supports video playback or not.
 *  Video playback is supported only by Mavic Pro.
 *
 *  @return `YES` if the media manager supports video playback.
 */
- (BOOL)isVideoPlaybackSupported;

/**
 *  Start video playback through `DJIMediaManager`.
 *  When the media manager is playing a video, video data can be received
 *  from `[camera:didReceiveVideoData:length:]` of `DJICameraDelegate` and 
 *  playback state received from `[manager:didUpdateVideoPlaybackState:]` of
 *  `DJIMediaManagerDelegate`.
 *  Video playback through `DJIMediaManager` is fixed at 720p.
 *
 *  @param videoMedia   The video to play. 
 *  @param block        The completion block to receive the command execution
 *                      result.
 */
- (void)playVideo:(DJIMedia *)videoMedia withCompletion:(DJICompletionBlock)block;

/**
 *  Video playback resumes the paused video.
 *
 *  @param block The completion block to receive the command execution result.
 */
- (void)resumeWithCompletion:(DJICompletionBlock)block;

/**
 *  Pause video playback.
 *
 *  @param block The completion block to receive the command execution result.
 */
- (void)pauseWithCompletion:(DJICompletionBlock)block;


/**
 *  The media manager stops the playing video.
 *
 *  @param block The completion block to receive the command execution result.
 */
- (void)stopWithCompletion:(DJICompletionBlock)block;

/**
 *  Video playback is skipped to the new position in seconds from the start of
 *  the video.
 *
 *  @param position New position to play in seconds from start of video. Input
                    with precision of greater than 3 decimal places, will be
 *                  rounded to 3.
 *  @param block    The completion block to receive the command execution result.
 */
- (void)moveToPosition:(float)position withCompletion:(DJICompletionBlock)block;

@end

NS_ASSUME_NONNULL_END
